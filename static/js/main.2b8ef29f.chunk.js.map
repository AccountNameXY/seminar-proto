{"version":3,"sources":["Routes/helloScreen.js","config.js","Routes/bruteForce.js","Components/graph.js","Routes/netzplan.js","Components/sidebar.js","Components/header.js","App.js","serviceWorker.js","index.js"],"names":["HelloScreen","props","state","Col","Title","Text","Row","Button","onClick","handleClick","Space","bool","this","history","push","React","Component","styled","h1","div","button","config","Aufgabe","ErweiterungBruteForce","BruteForce","steps","processes","newValue","showNewDroppable","addName","bind","onDragStart","onDragEnd","shiftWithinFirstDroppable","shiftWithinProcess","addProcess","keyPressed","Fragment","Background","Subtitle","lg","Outline","weight","droppableId","provided","ref","innerRef","droppableProps","length","map","step","index","key","id","draggableId","dragHandleProps","draggableProps","margin","name","ButtonText","Input","onChange","handleInput","placeholder","onBlur","onKeyDown","Frame","Dot","src","type","Add","addMainStep","process","Wrapper","result","destination","source","addSteptoProcess","setState","dest","droppableIndex","slice","splice","newProcess","event","target","value","draggableID","substeps","img","Number","input","h3","cursor","Graph","getOption","tooltip","animationDurationUpdate","animationEasingUpdate","series","layout","symbolSize","roam","label","normal","show","edgeSymbol","edgeSymbolSize","edgeLabel","textStyle","fontSize","data","bubbles","links","lineStyle","opacity","width","curveness","flattendData","p","subtypes","sub","newData","createBubbles","option","style","height","className","forEach","processIndex","undefined","bubble","x","y","itemStyle","color","i","link","allowBackstep","nextSubtype","subtype","subtypeIndex","nextProcessIndex","console","log","allLinks","addEndpoints","link1","link2","Netzplan","inputValue","showInput","showNetzplan","handleChange","active","WhiteFrame","align","e","handleKeyDown","addSubtype","Sidebar","Stickyness","Logo","Topbar","xl","size","offset","Divider","thickness","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b8ef29f.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\n\r\n\r\nclass HelloScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Col>\r\n                <Title>Herzlich Willkommen</Title>\r\n                <Text>\r\n                    Wir sind ein Team aus Studenten der TU Darmstadt und haben im Auftrag von Pickware diesen <br />\r\n                    Prototyp erstellt. Dieser soll helfen Personalisierungsschritte zu erfassen und zu visualisieren. <br />\r\n                    <br />\r\n\r\n\r\n                    Wir möchten sie einladen unseren Prototypen zu testen und uns zu helfen ihn zu verbessern\r\n\r\n                    <br />\r\n                    Falls sie einen Use-Case haben, testen sie gerne diesen. Ansonsten haben wir uns einen Use-Case für sie ausgedacht den sie nutzen können.\r\n\r\n                </Text>\r\n                <Row>\r\n                    <Col>\r\n                        <Button onClick={() => this.handleClick(true)}>Mit eigenem Use-Case <br /> fortfahren</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button onClick={() => this.handleClick(false)}>Ohne eigenem Use-Case<br /> beginnen</Button>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Space />\r\n            </Col>\r\n        )\r\n    }\r\n\r\n    handleClick(bool) {\r\n        this.props.history.push(\"/bruteforce\")\r\n    }\r\n\r\n\r\n}\r\n\r\nconst Title = styled.h1`\r\nfont - weight: bold;\r\nmargin: 0.5em auto;\r\n`\r\n\r\nconst Space = styled.div`\r\n    margin-bottom: 30em\r\n`\r\n\r\n\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\n\r\nconst Text = styled.div`\r\n\r\n`\r\n\r\nexport default HelloScreen","import React from \"react\";\r\n\r\nexport const config = {\r\n    Aufgabe: <div>Versuchen sie folgenden Use-Case umzusetzen: <br /> Sie möchten ein neues Tshirt in ihrem Online Shop verkaufen. Dieses Tshirt hat folgende Möglichkeiten zur Personalisierung: <br /> 1. Es gibt drei Verschiedene Druckarten: (a) Siebdruck (b) digitaler Direktdruck (c) Bestickt. <br /> 2. Es ist möglich einen Qualitätscheck auszuwählen.<br /> 3. Der Nutzer kann sich das T- Shirt als Geschenk verpacken lassen.</div>,\r\n    ErweiterungBruteForce: <div>Erstellen sie nun alle für Sie sinvollen Kombinationen aus diesen Schritten </div>\r\n\r\n}","import React from 'react';\r\nimport { config } from \"./../config\"\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nclass BruteForce extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {\r\n            steps: [\r\n                // { name: \"Prozesschritt1\", id: \"item-0\" }, { name: \"Prozesschritt2\", id: \"item-1\" }, { name: \"Prozesschritt3\", id: \"item-2\" }\r\n            ],\r\n            processes: [\r\n                // {\r\n                //     steps:\r\n                //         [{ name: \"Prozesschritt1\", id: \"proc-0-item-0\" }, { name: \"Prozesschritt2\", id: \"proc-0-item-1\" }]\r\n                // },\r\n                // {\r\n                //     steps:\r\n                //         [{ name: \"Prozesschritt1\", id: \"proc-1-item-0\" }, { name: \"Prozesschritt2\", id: \"proc-1-item-1\" }]\r\n                // }\r\n            ],\r\n            newValue: \"\",\r\n            showNewDroppable: false\r\n        }\r\n        this.addName = this.addName.bind(this)\r\n        this.onDragStart = this.onDragStart.bind(this)\r\n        this.onDragEnd = this.onDragEnd.bind(this)\r\n        this.shiftWithinFirstDroppable = this.shiftWithinFirstDroppable.bind(this)\r\n        this.shiftWithinProcess = this.shiftWithinProcess.bind(this)\r\n        this.addProcess = this.addProcess.bind(this)\r\n        this.keyPressed = this.keyPressed.bind(this)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { steps, processes } = this.state\r\n        return (\r\n            <React.Fragment>\r\n                <Background>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <Col >\r\n                                    <Title>BruteForce</Title>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Subtitle>Ihre Aufgabe</Subtitle>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {config &&\r\n                                        <React.Fragment>\r\n                                            <Text>{config.Aufgabe}</Text>\r\n                                            <Text>{config.ErweiterungBruteForce}</Text>\r\n\r\n                                        </React.Fragment>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <DragDropContext onDragEnd={this.onDragEnd.bind(this)} onDragStart={this.onDragStart.bind(this)}>\r\n                        <Row >\r\n                            {/* INITIAL STEPS */}\r\n                            <Col lg=\"4\">\r\n                                <Outline>\r\n                                    <Text weight={\"bold\"}>Alle Ihre Personalisierungsschritte</Text>\r\n                                    <Droppable droppableId=\"droppable-init\" >\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                {steps.length === 0 ?\r\n                                                    null\r\n                                                    :\r\n                                                    steps.map((step, index) => {\r\n                                                        return (\r\n                                                            <Draggable key={step.id} draggableId={step.id} index={index}>\r\n                                                                {(provided) => (\r\n                                                                    <div ref={provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps}>\r\n                                                                        <Row key={index}>\r\n                                                                            <Col >\r\n                                                                                <Outline margin=\"1em\">\r\n                                                                                    {step.name !== \"\" ?\r\n                                                                                        <ButtonText>{step.name}</ButtonText>\r\n                                                                                        :\r\n                                                                                        <Input onChange={this.handleInput.bind(this)} placeholder=\"Benne Prozesschritt...\" onBlur={() => this.addName(index)} onKeyDown={this.keyPressed} />\r\n                                                                                    }\r\n                                                                                    <Frame>\r\n                                                                                        <Dot src=\"dot.png\" />\r\n                                                                                        <Number type={step.name === \"\" ? \"input\" : \"reg\"}>{index + 1}</Number>\r\n                                                                                    </Frame>\r\n                                                                                </Outline>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </Draggable>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                {provided.placeholder}\r\n                                                <Row>\r\n                                                    <Col lg=\"auto\">\r\n                                                        <Outline margin=\"2em\">\r\n                                                            <ButtonText>Schritt Hinzufügen </ButtonText>\r\n                                                            <Add src=\"plus.svg\" onClick={this.addMainStep.bind(this)} />\r\n                                                        </Outline>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n                                        )}\r\n                                    </Droppable>\r\n                                </Outline>\r\n                            </Col>\r\n                            {/* Processes */}\r\n                            {processes.length !== 0 &&\r\n                                processes.map((process, index) => (\r\n                                    <Col lg=\"4\" key={index}>\r\n                                        <Droppable droppableId={\"droppable-\" + index} key={index}>\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.droppableProps}>\r\n                                                    <Outline key={index}  >\r\n                                                        <Text weight={\"bold\"}>Prozess {index + 1}</Text>\r\n                                                        {process.steps.map((step, index) => {\r\n                                                            return (\r\n                                                                <Draggable key={step.id} draggableId={step.id} index={index}>\r\n                                                                    {(provided) => (\r\n                                                                        <div ref={provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps}>\r\n                                                                            <Row key={index}>\r\n                                                                                <Col >\r\n                                                                                    <Outline margin=\"1em\" >\r\n                                                                                        {process.name !== \"\" ?\r\n                                                                                            <ButtonText>{step.name}</ButtonText>\r\n                                                                                            :\r\n                                                                                            <Input onChange={this.handleInput.bind(this)} onBlur={() => this.addName(index)} />\r\n                                                                                        }\r\n                                                                                        <Frame>\r\n                                                                                            <Dot src=\"dot.png\" />\r\n                                                                                            <Number>{index + 1}</Number>\r\n                                                                                        </Frame>\r\n                                                                                    </Outline>\r\n                                                                                </Col>\r\n                                                                            </Row>\r\n\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </Draggable>\r\n                                                            )\r\n                                                        })}\r\n                                                        {provided.placeholder}\r\n                                                    </Outline>\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </Col>\r\n                                ))\r\n                            }\r\n                        </Row>\r\n                        {/* NEW Process */}\r\n                        <Droppable droppableId=\"droppable-new\">\r\n                            {(provided) => (\r\n                                <Wrapper>\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.droppableProps}>\r\n                                        <Outline>\r\n                                            Personalisierungsschritte in dieses <br /> Feld ziehen um neuen Prozess zu erstellen\r\n                                    </Outline>\r\n                                    </div>\r\n                                </Wrapper>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                    <Button onClick={() => this.props.history.push(\"/netzplan\")}>Zur Nächsten Option</Button>\r\n                </Background>\r\n            </React.Fragment >\r\n        )\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        if (result.destination !== null) {\r\n            if (((result.destination.droppableId === result.source.droppableId) && (result.destination.index !== result.source.index))) {\r\n                ((result.destination.droppableId === \"droppable-init\") && (result.source.droppableId === \"droppable-init\")) ? this.shiftWithinFirstDroppable(result) : this.shiftWithinProcess(result)\r\n            } else if ((result.source.droppableId === \"droppable-init\") && (result.destination.droppableId === \"droppable-new\")) {\r\n                this.addProcess(result)\r\n            } else if (result.destination.droppableId !== result.source.droppableId) {\r\n                this.addSteptoProcess(result)\r\n            }\r\n        }\r\n    }\r\n\r\n    onDragStart(result) {\r\n        if (result.source.droppableId === \"droppable-init\") {\r\n            this.setState({ showNewDroppable: true })\r\n        }\r\n    }\r\n\r\n    shiftWithinFirstDroppable(result) {\r\n        const steps = [...this.state.steps]\r\n        var dest = steps[result.destination.index]\r\n        var source = steps[result.source.index]\r\n\r\n        steps[result.source.index] = dest\r\n        steps[result.destination.index] = source\r\n\r\n        this.setState({ steps: steps })\r\n    }\r\n\r\n    addSteptoProcess(result) {\r\n        var steps = [...this.state.steps]\r\n        var processes = [...this.state.processes]\r\n        var droppableIndex = result.destination.droppableId.slice(-1)\r\n        // var step = steps[result.source.index]\r\n        var lastDraggableID = processes[droppableIndex].steps[processes[droppableIndex].steps.length - 1].id + 1\r\n        var id = \"proc-\" + droppableIndex + \"-\" + lastDraggableID\r\n\r\n        processes[droppableIndex].steps.splice(result.destination.index, 0, { name: steps[result.source.index].name, id: id })\r\n        // var secondHalf = processes[droppableIndex].steps.splice(result.destination.index, processes[droppableIndex].steps.length)\r\n\r\n    }\r\n\r\n    shiftWithinProcess(result) {\r\n        const droppableIndex = result.destination.droppableId.slice(-1)\r\n        var process = [...this.state.processes]\r\n        var steps = process[droppableIndex].steps\r\n        var dest = steps[result.destination.index]\r\n        var source = steps[result.source.index]\r\n\r\n        steps[result.source.index] = dest\r\n        steps[result.destination.index] = source\r\n        process[droppableIndex].steps = steps\r\n\r\n        this.setState({ processes: process })\r\n\r\n    }\r\n\r\n    addProcess(result) {\r\n        var processes = [...this.state.processes]\r\n        if (result.destination.droppableId === \"droppable-new\") {\r\n            const newProcess = {\r\n                steps: [\r\n                    { name: this.state.steps[result.source.index].name, id: \"proc-\" + this.state.processes.length + \"-item-0\" }\r\n                ]\r\n            }\r\n            processes.push(newProcess)\r\n            // console.log(newProcess);\r\n            this.setState({ processes: processes })\r\n        }\r\n    }\r\n\r\n    handleInput(event) {\r\n        // console.log(event.target.value);\r\n        this.setState({\r\n            newValue: event.target.value\r\n        })\r\n    }\r\n\r\n    keyPressed(event) {\r\n        if (event.key === \"Enter\") {\r\n            this.addName(this.state.steps.length - 1)\r\n        }\r\n    }\r\n\r\n    addMainStep() {\r\n        const steps = [...this.state.steps]\r\n        var draggableID = steps.length === 0 ? 0 : steps[steps.length - 1].id.slice(-1) + 1\r\n        steps.push({ name: \"\", id: `item-${draggableID}`, substeps: [] })\r\n\r\n        this.setState({ steps: steps })\r\n    }\r\n\r\n    addName(index) {\r\n        const steps = [...this.state.steps]\r\n        steps[index].name = this.state.newValue\r\n        steps[index].id = `item-${index}`\r\n\r\n        this.setState({\r\n            steps: steps\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    margin:auto\r\n`\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\nconst Frame = styled.div`\r\n    display: inline\r\n    position: relative\r\n`\r\n\r\nconst Dot = styled.img`\r\n    width: 1em\r\n`\r\n\r\nconst Number = styled.div`\r\n    color: white;\r\n    display: inline;\r\n    position: absolute;\r\n    width: 1em;\r\n    margin-top: ${props => props.type === \"input\" ? \"0.3em \" : \"0.03em\"};\r\n    left: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n    border: 1px solid #D8DDE6;\r\n    padding: 0.25em 0.5em;\r\n    outline: none;\r\n    width: 80%\r\n`\r\n\r\nconst Title = styled.h1`\r\nfont - weight: bold;\r\nmargin: 0.5em auto;\r\n`\r\n\r\nconst Subtitle = styled.h3`\r\nmargin - top: 0.5em\r\n    `\r\n\r\nconst Text = styled.div`\r\nmargin: 1em auto;\r\n padding: 0 5 %;\r\nfont - weight: ${ props => props.weight ? props.weight : null}\r\n\r\n`\r\nconst ButtonText = styled.div`\r\nmargin: 3em auto;;\r\ndisplay: inline;\r\npadding: 0 0.5em\r\n\r\n    `\r\n\r\nconst Add = styled.img`\r\nwidth: 1.2rem;\r\nmargin - left: 1em\r\n    `\r\n\r\nconst Background = styled.div`\r\nwidth: 100%;\r\nbackground-color: #FAFBFC;\r\n`\r\n\r\nconst Outline = styled.div`\r\nborder: 1px solid #D8DDE6;\r\nmin-width: 5em;\r\nborder-radius: 3px;\r\npadding: 1em 0.5em;\r\n// margi    n: 2em 5em;\r\ndisplay: inline - block;\r\ncursor: ${props => props.cursor ? null : \"pointer\"};\r\nmargin: ${ props => props.margin ? props.margin : \"2em 5em\"}\r\n    : hover{\r\n    border: 1px solid #54698D\r\n}\r\n`\r\n\r\nexport default BruteForce","import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\n\r\nclass Graph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        var flattendData = []\r\n        this.props.data.map(p => p.subtypes ? p.subtypes.map(sub => flattendData.push(sub)) : flattendData.push(p))\r\n        var newData = this.createBubbles(flattendData)\r\n\r\n        this.setState({ bubbles: newData[0], links: newData[1] })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ReactEcharts\r\n                option={this.getOption()}\r\n                style={{ height: '800px', width: '100%' }}\r\n                className='react_for_echarts' />\r\n        )\r\n    }\r\n\r\n    createBubbles(flattendData) {\r\n        var bubbles = []\r\n        var links = []\r\n        this.props.data.forEach((process, processIndex) => {\r\n            if (process.subtypes === undefined) {\r\n                var bubble =\r\n                {\r\n                    name: process.name,\r\n                    x: 0,\r\n                    y: (processIndex + 1) * 50,\r\n                    itemStyle: { color: '#57D9A3' }\r\n                }\r\n\r\n                for (var i = processIndex + 1; i < this.props.data.length; i++) {\r\n                    if (this.props.data[i].subtypes === undefined) {\r\n                        var link = {\r\n                            source: process.name,\r\n                            target: this.props.data[i].name\r\n                        }\r\n                        links.push(link)\r\n                        if (this.props.data[i].allowBackstep) {\r\n                            const link = {\r\n                                source: this.props.data[i].name,\r\n                                target: process.name\r\n                            }\r\n                            links.push(link)\r\n                        }\r\n                    } else {\r\n                        this.props.data[i].subtypes.forEach((nextSubtype) => {\r\n                            var link = {\r\n                                source: process.name,\r\n                                target: nextSubtype.name\r\n                            }\r\n                            links.push(link)\r\n                            if (nextSubtype.allowBackstep) {\r\n                                const link = {\r\n                                    source: nextSubtype.name,\r\n                                    target: process.name\r\n                                }\r\n                                links.push(link)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n                bubbles.push(bubble)\r\n\r\n            } else {\r\n                process.subtypes.forEach((subtype, subtypeIndex) => {\r\n                    var bubble =\r\n                    {\r\n                        name: subtype.name,\r\n                        x: subtypeIndex * 200,\r\n                        y: (processIndex + 1) * 50,\r\n                        itemStyle: { color: '#57D9A3' }\r\n                    }\r\n                    for (var nextProcessIndex = processIndex + 1; nextProcessIndex < this.props.data.length; nextProcessIndex++) {\r\n                        if (this.props.data[nextProcessIndex].subtypes === undefined) {\r\n                            console.log(subtype, this.props.data[nextProcessIndex]);\r\n\r\n                            var link = {\r\n                                source: subtype.name,\r\n                                target: this.props.data[nextProcessIndex].name\r\n                            }\r\n                            links.push(link)\r\n\r\n                            if (this.props.data[nextProcessIndex].allowBackstep) {\r\n                                const link = {\r\n                                    source: this.props.data[nextProcessIndex].name,\r\n                                    target: subtype.name,\r\n                                }\r\n                                links.push(link)\r\n                            }\r\n                        } else {\r\n                            this.props.data[nextProcessIndex].subtypes.forEach((nextSubtype) => {\r\n                                var link = {\r\n                                    source: subtype.name,\r\n                                    target: nextSubtype.name\r\n                                }\r\n                                links.push(link)\r\n                                if (nextSubtype.allowBackstep) {\r\n                                    const link = {\r\n                                        source: nextSubtype.name,\r\n                                        target: subtype.name,\r\n                                    }\r\n                                    links.push(link)\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    bubbles.push(bubble)\r\n                })\r\n            }\r\n\r\n            if (processIndex === this.props.data.length - 1) {\r\n                bubbles.push({ name: \"X\", x: 200, y: (processIndex + 2) * 50, itemStyle: { color: '#F64747' }, symbolSize: \"50\" })\r\n            }\r\n        })\r\n\r\n        var allLinks = this.addEndpoints(links, flattendData)\r\n        bubbles.splice(0, 0, { name: \"S\", x: 200, y: 0, itemStyle: { color: '#57D9A3' }, symbolSize: \"50\" })\r\n        console.log(allLinks);\r\n        return [bubbles, allLinks]\r\n    }\r\n\r\n    addEndpoints(links, flattendData) {\r\n        flattendData.forEach(p => {\r\n            if (p.type !== 0) {\r\n                var link1 = {\r\n                    source: \"S\",\r\n                    target: p.name\r\n                }\r\n                var link2 = {\r\n                    source: p.name,\r\n                    target: \"X\"\r\n                }\r\n                links.push(link1)\r\n                links.push(link2)\r\n            }\r\n\r\n        })\r\n        return links\r\n    }\r\n\r\n    getOption = () => ({\r\n        tooltip: {},\r\n        animationDurationUpdate: 1500,\r\n        animationEasingUpdate: 'quinticInOut',\r\n        series: [\r\n            {\r\n                type: 'graph',\r\n                layout: 'none',\r\n                symbolSize: 50,\r\n                roam: true,\r\n                label: {\r\n                    normal: {\r\n                        show: true\r\n                    }\r\n                },\r\n                edgeSymbol: ['circle', 'arrow'],\r\n                edgeSymbolSize: [4, 10],\r\n                edgeLabel: {\r\n                    normal: {\r\n                        textStyle: {\r\n                            fontSize: 20\r\n                        }\r\n                    }\r\n                },\r\n                data: this.state.bubbles,\r\n                links: this.state.links,\r\n                lineStyle: {\r\n                    normal: {\r\n                        opacity: 0.9,\r\n                        width: 1,\r\n                        curveness: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    })\r\n}\r\n\r\nexport default Graph","import React from 'react';\r\nimport { config } from \"./../config\"\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\nimport Graph from \"./../Components/graph\"\r\n\r\n\r\nconst data = [\r\n    // {\r\n    //     name: \"Schritt 1\",\r\n    //     type: 0,\r\n    //     allowBackstep: true,\r\n    //     itemStyle: \"#57D9A3\",\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 1.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 1.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 1.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ],\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 11\",\r\n    //     type: \"m\",\r\n    //     allowBackstep: false,\r\n\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 2\",\r\n    //     type: 0,\r\n    //     allowBackstep: false,\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 2.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: true\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 2.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 2.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ],\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 3\",\r\n    //     type: 0,\r\n    //     allowBackstep: false,\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 3.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: true\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 3.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 3.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ]\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 33\",\r\n    //     type: \"m\",\r\n    //     allowBackstep: false\r\n\r\n    // },\r\n]\r\n\r\n\r\nclass Netzplan extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {\r\n            inputValue: [],\r\n            showInput: [],\r\n            showNetzplan: false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            data: data\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        var { data, showInput, showNetzplan } = this.state\r\n        return (\r\n            <Background>\r\n                <Row>\r\n                    <Col>\r\n                        <Row>\r\n                            <Col >\r\n                                <Title>Netzplan 2.0</Title>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Subtitle>Ihre Aufgabe</Subtitle>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                {/* {console.log(config.Aufgabe)} */}\r\n                                {config &&\r\n                                    <React.Fragment>\r\n                                        < Text >{config.Aufgabe}</Text><br />\r\n                                        <Text>Lassen sie sich darauf ihren Personalisierten Netzplan erstellen.</Text><br />\r\n                                    </React.Fragment>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                </Row>\r\n\r\n\r\n                {\r\n                    showNetzplan ?\r\n                        <React.Fragment>\r\n                            <Graph data={data} />\r\n                            <Button active={true} onClick={() => this.setState({ showNetzplan: false })}>zurückspringen</Button>\r\n                        </React.Fragment>\r\n                        :\r\n                        <React.Fragment>\r\n                            <Row>\r\n                                <Col lg=\"3\">\r\n                                    <Text margin={\"1em 0 0 0\"}>Erstelle einen Schritt</Text>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <WhiteFrame color={\"white\"} >\r\n                                        {data &&\r\n                                            <React.Fragment>\r\n                                                {data.map((process, processIndex) => (\r\n                                                    <Col lg=\"12\" key={processIndex}>\r\n                                                        <WhiteFrame margin={\"1em 5em\"}>\r\n                                                            <Row>\r\n\r\n                                                                <Col lg=\"6\">\r\n                                                                    <Row>\r\n                                                                        <Text align={\"left\"} margin={\"0em 0.5em\"}>Typ</Text>\r\n                                                                        <Frame>\r\n                                                                            <Dot src=\"dot.png\" />\r\n                                                                            <Number>{processIndex + 1}</Number>\r\n                                                                        </Frame>\r\n                                                                    </Row>\r\n\r\n                                                                    <Row>\r\n                                                                        <Outline>\r\n                                                                            <ButtonText>{process.name}</ButtonText>\r\n                                                                            <Frame>\r\n                                                                                <Dot src=\"dot.png\" />\r\n                                                                                <Number>{processIndex + 1}</Number>\r\n                                                                            </Frame>\r\n                                                                        </Outline>\r\n                                                                    </Row>\r\n                                                                </Col>\r\n                                                                <Col lg=\"6\">\r\n                                                                    <Text align={\"left\"}>Subtyp</Text>\r\n                                                                    {process.subtypes ?\r\n                                                                        process.subtypes.map((subtype, subtypeIndex) => (\r\n                                                                            <React.Fragment key={subtypeIndex}>\r\n                                                                                <Row>\r\n                                                                                    <Outline>\r\n                                                                                        <ButtonText>{subtype.name}</ButtonText>\r\n                                                                                        <Frame>\r\n                                                                                            <Dot src=\"dot.png\" />\r\n                                                                                            <Number>{subtypeIndex + 1}</Number>\r\n                                                                                        </Frame>\r\n                                                                                    </Outline>\r\n\r\n                                                                                </Row>\r\n                                                                                {process.subtypes.length - 1 === subtypeIndex &&\r\n                                                                                    <Row>\r\n                                                                                        <Outline onClick={showInput[processIndex] === true ? null : () => this.showInput(processIndex)}>\r\n                                                                                            {showInput[processIndex] === true ?\r\n                                                                                                <Input placeholder=\"Subtypen Hinzufügen\" onKeyDown={((e) => this.handleKeyDown(e, processIndex, \"sub\"))} onChange={(e) => this.handleChange(e, processIndex)}></Input>\r\n                                                                                                :\r\n                                                                                                <ButtonText>Subtypen hinzufügen</ButtonText>\r\n                                                                                            }\r\n                                                                                            <Add src=\"plus.svg\" onClick={showInput[processIndex] === true ? () => this.addSubtype(processIndex) : null} />\r\n                                                                                        </Outline>\r\n                                                                                    </Row>\r\n                                                                                }\r\n                                                                            </React.Fragment>\r\n                                                                        ))\r\n\r\n                                                                        :\r\n                                                                        <Row>\r\n                                                                            <Outline onClick={showInput[processIndex] === true ? null : () => this.showInput(processIndex)} >\r\n                                                                                {showInput[processIndex] === true ?\r\n                                                                                    <Input placeholder=\"Subtypen Hinzufügen\" onKeyDown={((e) => this.handleKeyDown(e, processIndex, \"sub\"))} onChange={(e) => this.handleChange(e, processIndex)}></Input>\r\n                                                                                    :\r\n                                                                                    <ButtonText>Subtypen hinzufügen</ButtonText>\r\n                                                                                }\r\n                                                                                <Add src=\"plus.svg\" onClick={showInput[processIndex] === true ? () => this.addSubtype(processIndex) : null} />\r\n                                                                            </Outline>\r\n\r\n                                                                        </Row>\r\n                                                                    }\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                        </WhiteFrame>\r\n                                                    </Col>\r\n                                                ))\r\n                                                }\r\n                                                <Row>\r\n                                                    <Wrapper>\r\n                                                        <Outline onClick={showInput[data.length] === true ? null : () => this.showInput(data.length)} >\r\n                                                            {showInput[data.length] === true ?\r\n                                                                <Input placeholder=\"Prozesschritt Hinzufügen\" onKeyDown={((e) => this.handleKeyDown(e, data.length, \"main\"))} onChange={(e) => this.handleChange(e, data.length)}></Input>\r\n                                                                :\r\n                                                                <ButtonText>Prozesschritt Hinzufügen</ButtonText>\r\n                                                            }\r\n                                                            <Add src=\"plus.svg\" onClick={showInput[data.length] === true ? () => this.addProcess() : null} />\r\n                                                        </Outline>\r\n                                                    </Wrapper>\r\n\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Button active={data.length !== 0} onClick={() => data.length !== 0 ? this.setState({ showNetzplan: true }) : null}>Erstelle Netzplan</Button>\r\n                                                </Row>\r\n\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    </WhiteFrame>\r\n                                </Col>\r\n                            </Row>\r\n                        </React.Fragment>\r\n                }\r\n            </Background >\r\n        )\r\n    }\r\n\r\n    handleKeyDown(e, index, type) {\r\n        if (e.key === \"Enter\") {\r\n            if (type === \"main\") {\r\n                this.addProcess()\r\n            } else {\r\n                this.addSubtype(index)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange(event, index) {\r\n        var inputValue = [...this.state.inputValue]\r\n        inputValue[index] = event.target.value\r\n        this.setState({ inputValue: inputValue })\r\n    }\r\n\r\n    showInput(index) {\r\n        var showInput = [...this.state.showInput]\r\n        showInput[index] = true\r\n        this.setState({ showInput: showInput })\r\n    }\r\n\r\n    addProcess() {\r\n        var data = [...this.state.data]\r\n        var showInput = [...this.state.showInput]\r\n        showInput[data.length] = false\r\n        data.push({ name: this.state.inputValue[data.length], type: \"m\", allowBackstep: false })\r\n        this.setState({ data: data })\r\n    }\r\n\r\n\r\n    addSubtype(index) {\r\n        var data = [...this.state.data]\r\n        var showInput = [...this.state.showInput]\r\n        showInput[index] = false\r\n\r\n        if (data[index].subtypes === undefined) {\r\n            data[index].subtypes = []\r\n        }\r\n        console.log(showInput);\r\n        data[index].subtypes.push({ name: this.state.inputValue[index], type: \"s\", allowBackstep: true })\r\n\r\n        this.setState({ data: data, showInput: showInput })\r\n    }\r\n}\r\n\r\nconst Title = styled.h1`\r\nfont-weight: bold;\r\nmargin: 1em auto; \r\n`\r\n\r\nconst Button = styled.button`\r\n    background-color: ${props => props.active ? \"#F64747\" : \"grey\"};\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\n\r\nconst Subtitle = styled.h3`\r\nmargin-top: 0.5em\r\n`\r\n\r\nconst ButtonText = styled.div`\r\nmargin: 3em auto;\r\ndisplay: inline;\r\npadding: 0 0.5em\r\n\r\n`\r\n\r\nconst Input = styled.input`\r\n    outline: none\r\n`\r\n\r\n\r\nconst Add = styled.img`\r\nwidth: 1.2rem;\r\nmargin - left: 1em\r\n    `\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 1em auto\r\n`\r\n\r\n\r\nconst Frame = styled.div`\r\n    display: inline\r\n    position: relative\r\n`\r\n\r\nconst Number = styled.div`\r\n    color: white;\r\n    display: inline;\r\n    position: absolute;\r\n    width: 1em;\r\n    margin-top: ${props => props.type === \"input\" ? \"0.3em \" : \"0.03em\"};\r\n    left: 0;\r\n`\r\n\r\nconst Dot = styled.img`\r\n    width: 1em\r\n`\r\n\r\n\r\nconst Outline = styled.div`\r\n    border: 1px solid #D8DDE6;\r\n    min-width: 10em;\r\n    border-radius: 3px;\r\n    padding: 1em 0.5em;\r\n    margin: 1em 3em;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    margin: ${ props => props.margin ? props.margin : null}\r\n    : hover{\r\n        border: 1px solid #54698D\r\n    }\r\n`\r\n\r\nconst Text = styled.div`\r\ntext-align: ${props => props.align ? props.align : null};\r\nmargin: ${props => props.margin ? props.margin : \"0.5em 3em\"}; \r\npadding: 0 0.5em\r\n`\r\n\r\nconst Background = styled.div`\r\nwidth: 100%;\r\nbackground-color: #FAFBFC;\r\n`\r\n\r\nconst WhiteFrame = styled.div`\r\nbackground-color: white;\r\nwidth: 90%;\r\nmargin: ${props => props.margin ? props.margin : \"1em auto\"}\r\nborder: 1px solid #D8DDE6\r\n\r\n`\r\n\r\nexport default Netzplan","import React from 'react';\r\nimport styled from \"styled-components\"\r\n// import { Row, Col } from 'reactstrap';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <Stickyness>\r\n                    <Logo src=\"logo.png\" />\r\n                    <Topbar >PERSONALISE YOUR PICKING</Topbar>\r\n                </Stickyness>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    height: 100%;\r\n    background-color: #2F394E\r\n`\r\n\r\nconst Stickyness = styled.div`\r\n    position: sticky; \r\n    top: 0\r\n`\r\n\r\nconst Topbar = styled.div`\r\n    color: white;\r\n    font-weight: bold;\r\n    margin: 0em auto; \r\n    // padding-top: 1em\r\n`\r\n\r\nconst Logo = styled.img`\r\n    max-width: 100%;\r\n    border-radius: 20px; \r\n    padding: 1em;\r\n    margin-top: 1em; \r\n`\r\n\r\n\r\nexport default Sidebar","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xl={{ size: 6, offset: 3 }} lg={{ size: 6, offset: 3 }} >\r\n                        <Input placeholder=\"Finde Produkte, Kunden, Bestellungen !\" />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Divider color={\"#D8DDE6\"} thickness={\"1px\"} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xl={{ size: \"auto\", offset: 0 }} lg={{ size: \"auto\", offset: 0 }} >\r\n                        <Text>Individualierungsprozess</Text>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Divider color={\"#57D9A3\"} thickness={\"2px\"} />\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst Input = styled.input`\r\n    height: 2em;\r\n    width: 100%;\r\n    outline: none;\r\n    padding: 1em 0.5em;\r\n    border: 1px solid #D8DDE6;\r\n    border-radius: 2px;\r\n    margin: 2em 0;\r\n`\r\n\r\nconst Divider = styled.div`\r\n    height: ${props => props.thickness ? props.thickness : \"1px\"};\r\n    width: 100%;\r\n    background: ${props => props.color ? props.color : \"white\"};\r\n`\r\n\r\nconst Text = styled.div`\r\n    color: #54698D;\r\n    font-weight: bold;\r\n    margin: 1.5em;\r\n`\r\n\r\n\r\n\r\n\r\nexport default Sidebar","import React, { Component } from \"react\";\nimport './App.css';\nimport HelloScreen from './Routes/helloScreen';\nimport BruteForce from \"./Routes/bruteForce\";\nimport Netzplan from \"./Routes/netzplan\";\nimport Sidebar from \"./Components/sidebar\"\nimport Header from \"./Components/header\"\nimport { Row, Col } from 'reactstrap';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Row>\n          <Col xl=\"2\" lg=\"2\">\n            <Sidebar />\n          </Col>\n          <Col xl=\"10\" lg=\"10\">\n            <Row>\n              <Col>\n                <Header />\n              </Col>\n            </Row>\n            <Row>\n              {/* <Col> */}\n              <Router>\n                <Route exact path=\"/\" component={(props) => < HelloScreen {...props} />} />\n                <Route path=\"/bruteForce\" component={(props) => < BruteForce {...props} />} />\n                <Route path=\"/netzplan\" component={Netzplan} />\n              </Router>\n              {/* </Col> */}\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
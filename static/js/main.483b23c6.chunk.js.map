{"version":3,"sources":["Routes/helloScreen.js","config.js","Routes/bruteForce.js","Components/graph.js","Routes/netzplan.js","Components/sidebar.js","Components/header.js","Routes/byeScreen.js","App.js","serviceWorker.js","index.js"],"names":["HelloScreen","props","state","Col","Title","Text","Row","Button","onClick","handleClick","Space","bool","this","useCase","history","push","React","Component","styled","h1","div","button","config","Aufgabe","ErweiterungBruteForce","noUseCaseNetzplan","noUseCaseBruteForce","danksagung","BruteForce","steps","processes","newValue","showNewDroppable","addName","bind","onDragStart","onDragEnd","shiftWithinFirstDroppable","shiftWithinProcess","addProcess","keyPressed","console","log","Fragment","Background","Subtitle","showUseCase","lg","xl","Outline","weight","droppableId","provided","ref","innerRef","droppableProps","length","map","step","index","key","id","draggableId","dragHandleProps","draggableProps","margin","name","ButtonText","Input","onChange","handleInput","placeholder","onBlur","onKeyDown","Frame","Dot","src","type","Add","addMainStep","process","Wrapper","result","destination","source","addSteptoProcess","setState","dest","droppableIndex","slice","splice","newProcess","event","target","value","draggableID","substeps","img","Number","input","h3","cursor","Graph","getOption","tooltip","animationDurationUpdate","animationEasingUpdate","series","layout","symbolSize","roam","label","normal","show","edgeSymbol","edgeSymbolSize","edgeLabel","textStyle","fontSize","data","bubbles","links","lineStyle","opacity","width","curveness","flattendData","p","subtypes","sub","newData","createBubbles","option","style","height","className","forEach","processIndex","undefined","bubble","x","y","itemStyle","color","i","link","allowBackstep","nextSubtype","subtype","subtypeIndex","nextProcessIndex","allLinks","addEndpoints","link1","link2","Netzplan","inputValue","showInput","showNetzplan","handleChange","active","WhiteFrame","align","e","handleKeyDown","addSubtype","Sidebar","Stickyness","Logo","Topbar","size","offset","Divider","thickness","ByeScreen","window","location","replace","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.483b23c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\n\r\n\r\nclass HelloScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Col>\r\n                <Title>Herzlich willkommen</Title>\r\n                <Text>\r\n                    Wir sind ein Team aus Studenten der TU Darmstadt und haben aufbauend auf dem Warenwirtschaftssystem von Pickware einen<br />\r\n                    Prototyp erstellt, der helfen soll, Individualisierungsprozesse zu erfassen und zu visualisieren. Dabei könnte es sich um Personalisierungs- und Herstellungsprozesse handeln.<br />\r\n                    <br />\r\n                    Der Prototyp beinhaltet zwei unterschiedliche Arten, Individualisierungsschritte abzubilden.\r\n                    <br />\r\n                    Die erste Variante konzentriert sich darauf, den Ablauf aller Schritte zu visualisieren und automatisch zu organisieren.\r\n                    <br />\r\n                    Die zweite Variante lässt Sie alle Möglichkeiten selbst organisieren. Dabei nutzen Sie ein Drag-and-Drop-System.\r\n                    <br />\r\n                    Um die beiden Varianten zu testen, haben wir uns einen Usecase ausgedacht, den Sie mit dem Prototyp abbilden sollen.\r\n                    <br />\r\n                    Falls Sie über die Aufgabe hinaus weitere Prozessschritte abbilden möchten, können Sie dies natürlich auch sehr gerne tun.\r\n                    <br />\r\n                    <br />\r\n                    Viel Spaß!\r\n                </Text>\r\n                <Row>\r\n                    {/* <Col>\r\n                        <Button onClick={() => this.handleClick(false)}>Mit eigenen Use-Case <br /> fortfahren</Button>\r\n                    </Col> */}\r\n                    <Col>\r\n                        <Button onClick={() => this.handleClick(true)}>Prototyp testen</Button>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Space />\r\n            </Col>\r\n        )\r\n    }\r\n\r\n    handleClick(bool) {\r\n\r\n        this.props.useCase(bool)\r\n        this.props.history.push(\"/netzplan\")\r\n    }\r\n\r\n\r\n}\r\n\r\nconst Title = styled.h1`\r\nfont - weight: bold;\r\nmargin: 0.5em auto;\r\n`\r\n\r\nconst Space = styled.div`\r\n    margin-bottom: 30em\r\n`\r\n\r\n\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\n\r\nconst Text = styled.div`\r\n    margin: 1em\r\n`\r\n\r\nexport default HelloScreen","import React from \"react\";\r\n\r\nexport const config = {\r\n    Aufgabe: <div>Versuchen Sie nachfolgenden Use Case umzusetzen: <br /> Sie möchten ein neues T-Shirt in Ihrem Onlineshop verkaufen. Dabei entstehen folgende Personalisierungsschritte: <br /> 1. Es gibt drei verschiedene Druckarten (Prozessschritt) mit den Subtypen (a) Siebdruck (b) digitaler Direktdruck (c) Bestickt. <br /> 2. Es ist möglich einen Qualitätscheck auszuwählen (Prozessschritt).<br /> 3. Der Nutzer kann sich das T-Shirt als Geschenk verpacken lassen (Prozessschritt).</div>,\r\n    ErweiterungBruteForce: <div>Erstellen sie nun alle für Sie sinvollen Kombinationen aus diesen Schritten </div>,\r\n    noUseCaseNetzplan: <div>Versuchen sie nun Ihren Use Case mit unserem Tool abzubilden. Unterteilen sie diesen in einzelne Schritte auf und lassen sie sich einen Netzplan als Übersicht erstellen.</div>,\r\n    noUseCaseBruteForce: <div>Versuchen sie nun Ihren Use Case ein weiteres mal abzubilden und per Drag-and-Drop alle möglichein Abläufe selbst zu erstellen.</div>,\r\n    danksagung: \"Vielen Dank, dass Sie an diesem Experiment teilgenommen haben. Uns ist es wichtig Feedback zu unserem Prototypen zu erhalten.Daher haben wir hierfür eine Umfrage eingerichtet.\"\r\n}","import React from 'react';\r\nimport { config } from \"./../config\"\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nclass BruteForce extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {\r\n            steps: [\r\n                // { name: \"Siebdruck\", id: \"item-0\", substeps: Array(0) },\r\n                // { name: \"digitaler Direktdruck\", id: \"item-1\", substeps: Array(0) },\r\n                // { name: \"Bestickt\", id: \"item-2\", substeps: Array(0) },\r\n                // { name: \"Qualitätscheck\", id: \"item-3\", substeps: Array(0) }\r\n                // \r\n                // { name: \"Prozesschritt1\", id: \"item-0\" }, { name: \"Prozesschritt2\", id: \"item-1\" }, { name: \"Prozesschritt3\", id: \"item-2\" }\r\n            ],\r\n            processes: [\r\n                // {\r\n                //     steps:\r\n                //         [{ name: \"Prozesschritt1\", id: \"proc-0-item-0\" }, { name: \"Prozesschritt2\", id: \"proc-0-item-1\" }]\r\n                // },\r\n                // {\r\n                //     steps:\r\n                //         [{ name: \"Prozesschritt1\", id: \"proc-1-item-0\" }, { name: \"Prozesschritt2\", id: \"proc-1-item-1\" }]\r\n                // }\r\n            ],\r\n            newValue: \"\",\r\n            showNewDroppable: false\r\n        }\r\n        this.addName = this.addName.bind(this)\r\n        this.onDragStart = this.onDragStart.bind(this)\r\n        this.onDragEnd = this.onDragEnd.bind(this)\r\n        this.shiftWithinFirstDroppable = this.shiftWithinFirstDroppable.bind(this)\r\n        this.shiftWithinProcess = this.shiftWithinProcess.bind(this)\r\n        this.addProcess = this.addProcess.bind(this)\r\n        this.keyPressed = this.keyPressed.bind(this)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        const { steps, processes } = this.state\r\n        return (\r\n            <React.Fragment>\r\n                <Background>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <Col >\r\n                                    <Title>Variante 2</Title>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Subtitle>Ihre Aufgabe</Subtitle>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {this.props.showUseCase ?\r\n                                        config &&\r\n                                        <React.Fragment>\r\n                                            <Text>Im Vergleich zu Variante 1, erstellt sich dieses System nach Fertigstellung\r\n                                                der möglichen Prozessschritte nicht selbst und bildet dabei auch nicht alle möglichen\r\n                                                Kombinationen ab.\r\n                                                Dies hat folgenden Grund: Falls Sie nun in Ihrem Onlineshop ein personalisiertes\r\n                                                T-Shirt anbieten, so hat der Nutzer häufig verschiedene Auswahlmöglichkeiten\r\n                                                bei der Bestellung (in dieser Aufgabe: Druckarten mit Input, Qualitätscheck\r\n                                                und Verpackung).\r\n                                                Für jede mögliche Kombination, die Sie in Ihrem Onlineshop anbieten möchten, erstellen\r\n                                                Sie dann einen eigenen Herstellungsablauf. Dabei muss dann auch nicht mehr in\r\n                                                Prozessschritt und Subtyp unterschieden werden, da direkt der Subtyp eingesetzt wird.\r\n                                            </Text>\r\n                                            <Text>Zunächst werden alle Prozesschritte erstellt und daraufhin per Drag-and-Drop die möglichen Kombinationen abgebildet. </Text>\r\n                                            <Text>{config.Aufgabe}</Text>\r\n                                            {/* <Text>{config.ErweiterungBruteForce}</Text> */}\r\n\r\n                                            <Text>\r\n                                                Sie möchten nun aber nur drei verschiedene Kombinationen der Personalisierungsschritte in Ihrem Onlineshop anbieten.\r\n                                                <br />\r\n                                                <br />\r\n                                                1. Digitaler Direktdruck  =>  Qualitätscheck  => Geschenkverpackung\r\n                                                <br />\r\n                                                2. Bestickt  =>  Geschenkverpackung\r\n                                                <br />\r\n                                                3. Siebdruck  =>  Qualitätscheck\r\n\r\n                                            </Text>\r\n                                        </React.Fragment>\r\n\r\n                                        :\r\n\r\n                                        <Text>{config.noUseCaseBruteForce}</Text>\r\n\r\n                                    }\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <DragDropContext onDragEnd={this.onDragEnd.bind(this)} onDragStart={this.onDragStart.bind(this)}>\r\n                        <Row >\r\n                            {/* INITIAL STEPS */}\r\n                            <Col lg=\"4\" xl=\"4\">\r\n                                <Outline>\r\n                                    <Text weight={\"bold\"}>Alle Personalisierungsschritte</Text>\r\n                                    <Droppable droppableId=\"droppable-init\" >\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                {steps.length === 0 ?\r\n                                                    null\r\n                                                    :\r\n                                                    steps.map((step, index) => {\r\n                                                        return (\r\n                                                            <Draggable key={step.id} draggableId={step.id} index={index}>\r\n                                                                {(provided) => (\r\n                                                                    <div ref={provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps}>\r\n                                                                        <Row key={index}>\r\n                                                                            <Col >\r\n                                                                                <Outline margin=\"1em\">\r\n                                                                                    {step.name !== \"\" ?\r\n                                                                                        <ButtonText>{step.name}</ButtonText>\r\n                                                                                        :\r\n                                                                                        <Input onChange={this.handleInput.bind(this)} placeholder=\"Benenne Prozesschritt...\" onBlur={() => this.addName(index)} onKeyDown={this.keyPressed} />\r\n                                                                                    }\r\n                                                                                    <Frame>\r\n                                                                                        <Dot src=\"dot.png\" />\r\n                                                                                        <Number type={step.name === \"\" ? \"input\" : \"reg\"}>{index + 1}</Number>\r\n                                                                                    </Frame>\r\n                                                                                </Outline>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </Draggable>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                {provided.placeholder}\r\n                                                <Row>\r\n                                                    <Col lg=\"auto\">\r\n                                                        <Outline margin=\"2em\">\r\n                                                            <ButtonText>Schritt hinzufügen </ButtonText>\r\n                                                            <Add src=\"plus.svg\" onClick={this.addMainStep.bind(this)} />\r\n                                                        </Outline>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n                                        )}\r\n                                    </Droppable>\r\n                                </Outline>\r\n                            </Col>\r\n                            {/* Processes */}\r\n                            {processes.length !== 0 &&\r\n                                processes.map((process, index) => (\r\n                                    <Col lg=\"4\" xl=\"4\" key={index}>\r\n                                        <Droppable droppableId={\"droppable-\" + index} key={index}>\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.droppableProps}>\r\n                                                    <Outline key={index}  >\r\n                                                        <Text weight={\"bold\"}>Prozess {index + 1}</Text>\r\n                                                        {process.steps.map((step, index) => {\r\n                                                            return (\r\n                                                                <Draggable key={step.id} draggableId={step.id} index={index}>\r\n                                                                    {(provided) => (\r\n                                                                        <div ref={provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps}>\r\n                                                                            <Row key={index}>\r\n                                                                                <Col >\r\n                                                                                    <Outline margin=\"1em\" >\r\n                                                                                        {process.name !== \"\" ?\r\n                                                                                            <ButtonText>{step.name}</ButtonText>\r\n                                                                                            :\r\n                                                                                            <Input onChange={this.handleInput.bind(this)} onBlur={() => this.addName(index)} />\r\n                                                                                        }\r\n                                                                                        <Frame>\r\n                                                                                            <Dot src=\"dot.png\" />\r\n                                                                                            <Number>{index + 1}</Number>\r\n                                                                                        </Frame>\r\n                                                                                    </Outline>\r\n                                                                                </Col>\r\n                                                                            </Row>\r\n\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </Draggable>\r\n                                                            )\r\n                                                        })}\r\n                                                        {provided.placeholder}\r\n                                                    </Outline>\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </Col>\r\n                                ))\r\n                            }\r\n                        </Row>\r\n                        {/* NEW Process */}\r\n                        <Droppable droppableId=\"droppable-new\">\r\n                            {(provided) => (\r\n                                <Wrapper>\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.droppableProps}>\r\n                                        <Outline>\r\n                                            Personalisierungsschritte in dieses <br /> Feld ziehen, um neuen Prozess zu erstellen.\r\n                                    </Outline>\r\n                                    </div>\r\n                                </Wrapper>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                    <Button onClick={() => this.props.history.push(\"/byeScreen\")}>Weiter</Button>\r\n                </Background>\r\n            </React.Fragment >\r\n        )\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        if (result.destination !== null) {\r\n            if (((result.destination.droppableId === result.source.droppableId) && (result.destination.index !== result.source.index))) {\r\n                ((result.destination.droppableId === \"droppable-init\") && (result.source.droppableId === \"droppable-init\")) ? this.shiftWithinFirstDroppable(result) : this.shiftWithinProcess(result)\r\n            } else if ((result.source.droppableId === \"droppable-init\") && (result.destination.droppableId === \"droppable-new\")) {\r\n                this.addProcess(result)\r\n            } else if (result.destination.droppableId !== result.source.droppableId) {\r\n                this.addSteptoProcess(result)\r\n            }\r\n        }\r\n    }\r\n\r\n    onDragStart(result) {\r\n        if (result.source.droppableId === \"droppable-init\") {\r\n            this.setState({ showNewDroppable: true })\r\n        }\r\n    }\r\n\r\n    shiftWithinFirstDroppable(result) {\r\n        const steps = [...this.state.steps]\r\n        var dest = steps[result.destination.index]\r\n        var source = steps[result.source.index]\r\n\r\n        steps[result.source.index] = dest\r\n        steps[result.destination.index] = source\r\n\r\n        this.setState({ steps: steps })\r\n    }\r\n\r\n    addSteptoProcess(result) {\r\n        var steps = [...this.state.steps]\r\n        var processes = [...this.state.processes]\r\n        var droppableIndex = result.destination.droppableId.slice(-1)\r\n        // var step = steps[result.source.index]\r\n        var lastDraggableID = processes[droppableIndex].steps[processes[droppableIndex].steps.length - 1].id + 1\r\n        var id = \"proc-\" + droppableIndex + \"-\" + lastDraggableID\r\n\r\n        processes[droppableIndex].steps.splice(result.destination.index, 0, { name: steps[result.source.index].name, id: id })\r\n        // var secondHalf = processes[droppableIndex].steps.splice(result.destination.index, processes[droppableIndex].steps.length)\r\n\r\n    }\r\n\r\n    shiftWithinProcess(result) {\r\n        const droppableIndex = result.destination.droppableId.slice(-1)\r\n        var process = [...this.state.processes]\r\n        var steps = process[droppableIndex].steps\r\n        var dest = steps[result.destination.index]\r\n        var source = steps[result.source.index]\r\n\r\n        steps[result.source.index] = dest\r\n        steps[result.destination.index] = source\r\n        process[droppableIndex].steps = steps\r\n\r\n        this.setState({ processes: process })\r\n\r\n    }\r\n\r\n    addProcess(result) {\r\n        var processes = [...this.state.processes]\r\n        if (result.destination.droppableId === \"droppable-new\") {\r\n            const newProcess = {\r\n                steps: [\r\n                    { name: this.state.steps[result.source.index].name, id: \"proc-\" + this.state.processes.length + \"-item-0\" }\r\n                ]\r\n            }\r\n            processes.push(newProcess)\r\n            // console.log(newProcess);\r\n            this.setState({ processes: processes })\r\n        }\r\n    }\r\n\r\n    handleInput(event) {\r\n        // console.log(event.target.value);\r\n        this.setState({\r\n            newValue: event.target.value\r\n        })\r\n    }\r\n\r\n    keyPressed(event) {\r\n        if (event.key === \"Enter\") {\r\n            this.addName(this.state.steps.length - 1)\r\n        }\r\n    }\r\n\r\n    addMainStep() {\r\n        const steps = [...this.state.steps]\r\n        var draggableID = steps.length === 0 ? 0 : steps[steps.length - 1].id.slice(-1) + 1\r\n        steps.push({ name: \"\", id: `item-${draggableID}`, substeps: [] })\r\n\r\n        this.setState({ steps: steps })\r\n    }\r\n\r\n    addName(index) {\r\n        const steps = [...this.state.steps]\r\n        steps[index].name = this.state.newValue\r\n        steps[index].id = `item-${index}`\r\n\r\n        this.setState({\r\n            steps: steps\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    margin:auto\r\n`\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\nconst Frame = styled.div`\r\n    display: inline\r\n    position: relative\r\n`\r\n\r\nconst Dot = styled.img`\r\n    width: 1em\r\n`\r\n\r\nconst Number = styled.div`\r\n    color: white;\r\n    display: inline;\r\n    position: absolute;\r\n    width: 1em;\r\n    margin-top: ${props => props.type === \"input\" ? \"0.3em \" : \"0.03em\"};\r\n    left: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n    border: 1px solid #D8DDE6;\r\n    padding: 0.25em 0.5em;\r\n    outline: none;\r\n    width: 80%\r\n`\r\n\r\nconst Title = styled.h1`\r\nfont - weight: bold;\r\nmargin: 0.5em auto;\r\n`\r\n\r\nconst Subtitle = styled.h3`\r\nmargin - top: 0.5em\r\n    `\r\n\r\nconst Text = styled.div`\r\nmargin: 1em auto;\r\n padding: 0 5 %;\r\nfont - weight: ${ props => props.weight ? props.weight : null}\r\n\r\n`\r\nconst ButtonText = styled.div`\r\nmargin: 3em auto;;\r\ndisplay: inline;\r\npadding: 0 0.5em\r\n\r\n    `\r\n\r\nconst Add = styled.img`\r\nwidth: 1.2rem;\r\nmargin - left: 1em\r\n    `\r\n\r\nconst Background = styled.div`\r\nwidth: 100%;\r\nbackground-color: #FAFBFC;\r\n`\r\n\r\nconst Outline = styled.div`\r\nborder: 1px solid #D8DDE6;\r\nmin-width: 5em;\r\nborder-radius: 3px;\r\npadding: 1em 0.5em;\r\n// margi    n: 2em 5em;\r\ndisplay: inline - block;\r\ncursor: ${props => props.cursor ? null : \"pointer\"};\r\nmargin: ${ props => props.margin ? props.margin : \"2em 5em\"}\r\n    : hover{\r\n    border: 1px solid #54698D\r\n}\r\n`\r\n\r\nexport default BruteForce","import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\n\r\nclass Graph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        var flattendData = []\r\n        this.props.data.map(p => p.subtypes ? p.subtypes.map(sub => flattendData.push(sub)) : flattendData.push(p))\r\n        var newData = this.createBubbles(flattendData)\r\n\r\n        this.setState({ bubbles: newData[0], links: newData[1] })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return (\r\n            <ReactEcharts\r\n                option={this.getOption()}\r\n                style={{ height: '800px', width: '100%' }}\r\n                className='react_for_echarts' />\r\n        )\r\n    }\r\n\r\n    createBubbles(flattendData) {\r\n        var bubbles = []\r\n        var links = []\r\n        this.props.data.forEach((process, processIndex) => {\r\n            if (process.subtypes === undefined) {\r\n                var bubble =\r\n                {\r\n                    name: process.name,\r\n                    x: 0,\r\n                    y: (processIndex + 1) * 50,\r\n                    itemStyle: { color: '#57D9A3' }\r\n                }\r\n\r\n                for (var i = processIndex + 1; i < this.props.data.length; i++) {\r\n                    if (this.props.data[i].subtypes === undefined) {\r\n                        var link = {\r\n                            source: process.name,\r\n                            target: this.props.data[i].name\r\n                        }\r\n                        links.push(link)\r\n                        if (this.props.data[i].allowBackstep) {\r\n                            const link = {\r\n                                source: this.props.data[i].name,\r\n                                target: process.name\r\n                            }\r\n                            links.push(link)\r\n                        }\r\n                    } else {\r\n                        this.props.data[i].subtypes.forEach((nextSubtype) => {\r\n                            var link = {\r\n                                source: process.name,\r\n                                target: nextSubtype.name\r\n                            }\r\n                            links.push(link)\r\n                            if (nextSubtype.allowBackstep) {\r\n                                const link = {\r\n                                    source: nextSubtype.name,\r\n                                    target: process.name\r\n                                }\r\n                                links.push(link)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n                bubbles.push(bubble)\r\n\r\n            } else {\r\n                process.subtypes.forEach((subtype, subtypeIndex) => {\r\n                    var bubble =\r\n                    {\r\n                        name: subtype.name,\r\n                        x: subtypeIndex * 200,\r\n                        y: (processIndex + 1) * 50,\r\n                        itemStyle: { color: '#57D9A3' }\r\n                    }\r\n                    for (var nextProcessIndex = processIndex + 1; nextProcessIndex < this.props.data.length; nextProcessIndex++) {\r\n                        if (this.props.data[nextProcessIndex].subtypes === undefined) {\r\n\r\n                            var link = {\r\n                                source: subtype.name,\r\n                                target: this.props.data[nextProcessIndex].name\r\n                            }\r\n                            links.push(link)\r\n\r\n                            if (this.props.data[nextProcessIndex].allowBackstep) {\r\n                                const link = {\r\n                                    source: this.props.data[nextProcessIndex].name,\r\n                                    target: subtype.name,\r\n                                }\r\n                                links.push(link)\r\n                            }\r\n                        } else {\r\n                            this.props.data[nextProcessIndex].subtypes.forEach((nextSubtype) => {\r\n                                var link = {\r\n                                    source: subtype.name,\r\n                                    target: nextSubtype.name\r\n                                }\r\n                                links.push(link)\r\n                                if (nextSubtype.allowBackstep) {\r\n                                    const link = {\r\n                                        source: nextSubtype.name,\r\n                                        target: subtype.name,\r\n                                    }\r\n                                    links.push(link)\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    bubbles.push(bubble)\r\n                })\r\n            }\r\n\r\n            if (processIndex === this.props.data.length - 1) {\r\n                bubbles.push({ name: \"End\", x: 200, y: (processIndex + 2) * 50, itemStyle: { color: '#F64747' }, symbolSize: \"50\" })\r\n            }\r\n        })\r\n\r\n        var allLinks = this.addEndpoints(links, flattendData)\r\n\r\n        bubbles.splice(0, 0, { name: \"Start\", x: 200, y: 0, itemStyle: { color: '#F64747' }, symbolSize: \"50\" })\r\n        return [bubbles, allLinks]\r\n    }\r\n\r\n    addEndpoints(links, flattendData) {\r\n        flattendData.forEach(p => {\r\n            if (p.type !== 0) {\r\n                var link1 = {\r\n                    source: \"Start\",\r\n                    target: p.name\r\n                }\r\n                var link2 = {\r\n                    source: p.name,\r\n                    target: \"End\"\r\n                }\r\n                links.push(link1)\r\n                links.push(link2)\r\n            }\r\n\r\n        })\r\n        links.push({ source: \"Start\", target: \"End\" })\r\n\r\n        return links\r\n    }\r\n\r\n    getOption = () => ({\r\n        tooltip: {},\r\n        animationDurationUpdate: 1500,\r\n        animationEasingUpdate: 'quinticInOut',\r\n        series: [\r\n            {\r\n                type: 'graph',\r\n                layout: 'none',\r\n                symbolSize: 50,\r\n                roam: true,\r\n                label: {\r\n                    normal: {\r\n                        show: true\r\n                    }\r\n                },\r\n                edgeSymbol: ['circle', 'arrow'],\r\n                edgeSymbolSize: [4, 10],\r\n                edgeLabel: {\r\n                    normal: {\r\n                        textStyle: {\r\n                            fontSize: 20\r\n                        }\r\n                    }\r\n                },\r\n                data: this.state.bubbles,\r\n                links: this.state.links,\r\n                lineStyle: {\r\n                    normal: {\r\n                        opacity: 0.9,\r\n                        width: 1,\r\n                        curveness: 0\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    })\r\n}\r\n\r\nexport default Graph","import React from 'react';\r\nimport { config } from \"./../config\"\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\nimport Graph from \"./../Components/graph\"\r\n\r\n\r\nconst data = [\r\n    // {\r\n    //     name: \"Schritt 1\",\r\n    //     type: 0,\r\n    //     allowBackstep: true,\r\n    //     itemStyle: \"#57D9A3\",\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 1.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 1.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 1.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ],\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 11\",\r\n    //     type: \"m\",\r\n    //     allowBackstep: false,\r\n\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 2\",\r\n    //     type: 0,\r\n    //     allowBackstep: false,\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 2.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: true\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 2.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 2.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ],\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 3\",\r\n    //     type: 0,\r\n    //     allowBackstep: false,\r\n    //     subtypes: [\r\n    //         {\r\n    //             name: \"Schritt 3.1\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: true\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 3.2\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         },\r\n    //         {\r\n    //             name: \"Schritt 3.3\",\r\n    //             type: \"s\",\r\n    //             allowBackstep: false\r\n    //         }\r\n    //     ]\r\n    // },\r\n    // {\r\n    //     name: \"Schritt 33\",\r\n    //     type: \"m\",\r\n    //     allowBackstep: false\r\n\r\n    // },\r\n]\r\n\r\n\r\nclass Netzplan extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {\r\n            inputValue: [],\r\n            showInput: [],\r\n            showNetzplan: false,\r\n            data: [\r\n\r\n            ]\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setState({\r\n        //     data: data\r\n        // })\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        var { data, showInput, showNetzplan } = this.state\r\n        return (\r\n            <Background>\r\n                <Row>\r\n                    <Col>\r\n                        <Row>\r\n                            <Col >\r\n                                <Title>Variante 1</Title>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Subtitle>Ihre Aufgabe</Subtitle>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                {this.props.showUseCase ?\r\n\r\n                                    config &&\r\n                                    <React.Fragment>\r\n                                        < Text >{config.Aufgabe}</Text><br />\r\n                                        <Text>Lassen Sie sich daraufhin Ihren personalisierten Netzplan erstellen.</Text><br />\r\n                                    </React.Fragment>\r\n                                    :\r\n                                    <Text>{config.noUseCaseNetzplan}</Text>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                </Row>\r\n\r\n\r\n                {\r\n                    showNetzplan ?\r\n                        <React.Fragment>\r\n                            <Graph data={data} />\r\n                            <Row>\r\n                                <Col lg=\"6\">\r\n                                    <Button active={true} onClick={() => this.setState({ showNetzplan: false })}>zurückspringen</Button>\r\n                                </Col>\r\n                                <Col lg=\"6\">\r\n                                    <Button color={\"#57D9A3\"} onClick={() => this.props.history.push(\"bruteforce\")}>Zur nächsten Aufgabe</Button>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </React.Fragment>\r\n                        :\r\n                        <React.Fragment>\r\n                            {/* <Row>\r\n                                <Col lg=\"3\">\r\n                                    <Text margin={\"1em 0 0 0\"}>Erstelle einen Schritt</Text>\r\n                                </Col>\r\n                            </Row> */}\r\n                            <Row>\r\n                                <Col>\r\n                                    <WhiteFrame color={\"white\"} >\r\n                                        {data &&\r\n                                            <React.Fragment>\r\n                                                {data.map((process, processIndex) => (\r\n                                                    <Col lg=\"12\" key={processIndex}>\r\n                                                        <WhiteFrame margin={\"1em 5em\"}>\r\n                                                            <Row>\r\n\r\n                                                                <Col lg=\"6\">\r\n                                                                    <Row>\r\n                                                                        <Text align={\"left\"} margin={\"0em 0.5em\"}>Typ</Text>\r\n                                                                        <Frame>\r\n                                                                            <Dot src=\"dot.png\" />\r\n                                                                            <Number>{processIndex + 1}</Number>\r\n                                                                        </Frame>\r\n                                                                    </Row>\r\n\r\n                                                                    <Row>\r\n                                                                        <Outline>\r\n                                                                            <ButtonText>{process.name}</ButtonText>\r\n                                                                            <Frame>\r\n                                                                                <Dot src=\"dot.png\" />\r\n                                                                                <Number>{processIndex + 1}</Number>\r\n                                                                            </Frame>\r\n                                                                        </Outline>\r\n                                                                    </Row>\r\n                                                                </Col>\r\n                                                                <Col lg=\"6\">\r\n                                                                    <Text align={\"left\"}>Subtyp</Text>\r\n                                                                    {process.subtypes ?\r\n                                                                        process.subtypes.map((subtype, subtypeIndex) => (\r\n                                                                            <React.Fragment key={subtypeIndex}>\r\n                                                                                <Row>\r\n                                                                                    <Outline>\r\n                                                                                        <ButtonText>{subtype.name}</ButtonText>\r\n                                                                                        <Frame>\r\n                                                                                            <Dot src=\"dot.png\" />\r\n                                                                                            <Number>{subtypeIndex + 1}</Number>\r\n                                                                                        </Frame>\r\n                                                                                    </Outline>\r\n\r\n                                                                                </Row>\r\n                                                                                {process.subtypes.length - 1 === subtypeIndex &&\r\n                                                                                    <Row>\r\n                                                                                        <Outline onClick={showInput[processIndex] === true ? null : () => this.showInput(processIndex)}>\r\n                                                                                            {showInput[processIndex] === true ?\r\n                                                                                                <Input placeholder=\"Subtypen benennen\" onKeyDown={((e) => this.handleKeyDown(e, processIndex, \"sub\"))} onChange={(e) => this.handleChange(e, processIndex)}></Input>\r\n                                                                                                :\r\n                                                                                                <ButtonText>Subtypen hinzufügen</ButtonText>\r\n                                                                                            }\r\n                                                                                            <Add src=\"plus.svg\" onClick={showInput[processIndex] === true ? () => this.addSubtype(processIndex) : null} />\r\n                                                                                        </Outline>\r\n                                                                                    </Row>\r\n                                                                                }\r\n                                                                            </React.Fragment>\r\n                                                                        ))\r\n\r\n                                                                        :\r\n                                                                        <Row>\r\n                                                                            <Outline onClick={showInput[processIndex] === true ? null : () => this.showInput(processIndex)} >\r\n                                                                                {showInput[processIndex] === true ?\r\n                                                                                    <Input placeholder=\"Subtypen benennen\" onKeyDown={((e) => this.handleKeyDown(e, processIndex, \"sub\"))} onChange={(e) => this.handleChange(e, processIndex)}></Input>\r\n                                                                                    :\r\n                                                                                    <ButtonText>Subtypen hinzufügen</ButtonText>\r\n                                                                                }\r\n                                                                                <Add src=\"plus.svg\" onClick={showInput[processIndex] === true ? () => this.addSubtype(processIndex) : null} />\r\n                                                                            </Outline>\r\n\r\n                                                                        </Row>\r\n                                                                    }\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                        </WhiteFrame>\r\n                                                    </Col>\r\n                                                ))\r\n                                                }\r\n                                                <Row>\r\n                                                    <Wrapper>\r\n                                                        <Outline onClick={showInput[data.length] === true ? null : () => this.showInput(data.length)} >\r\n                                                            {showInput[data.length] === true ?\r\n                                                                <Input placeholder=\"Prozessschritt benennen\" onKeyDown={((e) => this.handleKeyDown(e, data.length, \"main\"))} onChange={(e) => this.handleChange(e, data.length)}></Input>\r\n                                                                :\r\n                                                                <ButtonText>Prozessschritt hinzufügen</ButtonText>\r\n                                                            }\r\n                                                            <Add src=\"plus.svg\" onClick={showInput[data.length] === true ? () => this.addProcess() : null} />\r\n                                                        </Outline>\r\n                                                    </Wrapper>\r\n\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Button active={data.length !== 0} onClick={() => data.length !== 0 ? this.setState({ showNetzplan: true }) : null}>Erstelle Netzplan</Button>\r\n                                                </Row>\r\n\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    </WhiteFrame>\r\n                                </Col>\r\n                            </Row>\r\n                        </React.Fragment>\r\n                }\r\n                <Space></Space>\r\n            </Background >\r\n        )\r\n    }\r\n\r\n    handleKeyDown(e, index, type) {\r\n        if (e.key === \"Enter\") {\r\n            if (type === \"main\") {\r\n                this.addProcess()\r\n            } else {\r\n                this.addSubtype(index)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange(event, index) {\r\n        var inputValue = [...this.state.inputValue]\r\n        inputValue[index] = event.target.value\r\n        this.setState({ inputValue: inputValue })\r\n    }\r\n\r\n    showInput(index) {\r\n        var showInput = [...this.state.showInput]\r\n        showInput[index] = true\r\n        this.setState({ showInput: showInput })\r\n    }\r\n\r\n    addProcess() {\r\n        var data = [...this.state.data]\r\n        var showInput = [...this.state.showInput]\r\n        showInput[data.length] = false\r\n        data.push({ name: this.state.inputValue[data.length], type: \"m\", allowBackstep: false })\r\n        this.setState({ data: data })\r\n    }\r\n\r\n\r\n    addSubtype(index) {\r\n        var data = [...this.state.data]\r\n        var showInput = [...this.state.showInput]\r\n        showInput[index] = false\r\n\r\n        if (data[index].subtypes === undefined) {\r\n            data[index].subtypes = []\r\n        }\r\n        data[index].subtypes.push({ name: this.state.inputValue[index], type: \"s\", allowBackstep: true })\r\n\r\n        this.setState({ data: data, showInput: showInput })\r\n    }\r\n}\r\n\r\nconst Title = styled.h1`\r\nfont-weight: bold;\r\nmargin: 0.5em auto; \r\n`\r\n\r\nconst Button = styled.button`\r\n    background-color: ${props => props.color ? props.color : props.active ? \"#F64747\" : \"grey\"};\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\nconst Space = styled.div`\r\n    margin-bottom: 30em\r\n`\r\n\r\n\r\nconst Subtitle = styled.h3`\r\nmargin-top: 0.5em\r\n`\r\n\r\nconst ButtonText = styled.div`\r\nmargin: 3em auto;\r\ndisplay: inline;\r\npadding: 0 0.5em\r\n\r\n`\r\n\r\nconst Input = styled.input`\r\n    outline: none\r\n`\r\n\r\n\r\nconst Add = styled.img`\r\nwidth: 1.2rem;\r\nmargin - left: 1em\r\n    `\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 1em auto\r\n`\r\n\r\n\r\nconst Frame = styled.div`\r\n    display: inline\r\n    position: relative\r\n`\r\n\r\nconst Number = styled.div`\r\n    color: white;\r\n    display: inline;\r\n    position: absolute;\r\n    width: 1em;\r\n    margin-top: ${props => props.type === \"input\" ? \"0.3em \" : \"0.03em\"};\r\n    left: 0;\r\n`\r\n\r\nconst Dot = styled.img`\r\n    width: 1em\r\n`\r\n\r\n\r\nconst Outline = styled.div`\r\n    border: 1px solid #D8DDE6;\r\n    min-width: 10em;\r\n    border-radius: 3px;\r\n    padding: 1em 0.5em;\r\n    margin: 1em 3em;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    margin: ${ props => props.margin ? props.margin : null}\r\n    : hover{\r\n        border: 1px solid #54698D\r\n    }\r\n`\r\n\r\nconst Text = styled.div`\r\ntext-align: ${props => props.align ? props.align : null};\r\nmargin: ${props => props.margin ? props.margin : \"0.5em 3em\"}; \r\npadding: 0 0.5em\r\n`\r\n\r\nconst Background = styled.div`\r\nwidth: 100%;\r\nbackground-color: #FAFBFC;\r\n`\r\n\r\nconst WhiteFrame = styled.div`\r\nbackground-color: white;\r\nwidth: 90%;\r\nmargin: ${props => props.margin ? props.margin : \"1em auto\"}\r\nborder: 1px solid #D8DDE6\r\n\r\n`\r\n\r\nexport default Netzplan","import React from 'react';\r\nimport styled from \"styled-components\"\r\n// import { Row, Col } from 'reactstrap';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <Stickyness>\r\n                    <Logo src=\"tud_logo.png\" />\r\n                    <Background>\r\n                        <Logo src=\"hda.svg\" />\r\n                    </Background>\r\n                    <Topbar>Cross Domain Challenge</Topbar>\r\n                </Stickyness>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    height: 100%;\r\n    background-color: #2F394E\r\n`\r\n\r\nconst Stickyness = styled.div`\r\n    position: sticky; \r\n    top: 0\r\n`\r\n\r\nconst Background = styled.div`\r\n    margin: 1em;\r\n    border-radius: 8px;\r\n    background-color: white\r\n`\r\n\r\nconst Topbar = styled.div`\r\n    color: white;\r\n    font-weight: bold;\r\n    margin: 0em auto; \r\n    // padding-top: 1em\r\n`\r\n\r\nconst Logo = styled.img`\r\n    max-width: 100%;\r\n    border-radius: 20px; \r\n    padding: 1em;\r\n    margin-top: 1em; \r\n`\r\n\r\n\r\nexport default Sidebar","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from 'reactstrap';\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xl={{ size: 6, offset: 3 }} lg={{ size: 6, offset: 3 }} >\r\n                        <Input placeholder=\"Finde Produkte, Kunden oder Bestellungen !\" />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Divider color={\"#D8DDE6\"} thickness={\"1px\"} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xl={{ size: \"auto\", offset: 0 }} lg={{ size: \"auto\", offset: 0 }} >\r\n                        <Text>Individualisierungsprozess</Text>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Divider color={\"#57D9A3\"} thickness={\"2px\"} />\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst Input = styled.input`\r\n    height: 2em;\r\n    width: 100%;\r\n    outline: none;\r\n    padding: 1em 0.5em;\r\n    border: 1px solid #D8DDE6;\r\n    border-radius: 2px;\r\n    margin: 2em 0;\r\n`\r\n\r\nconst Divider = styled.div`\r\n    height: ${props => props.thickness ? props.thickness : \"1px\"};\r\n    width: 100%;\r\n    background: ${props => props.color ? props.color : \"white\"};\r\n`\r\n\r\nconst Text = styled.div`\r\n    color: #54698D;\r\n    font-weight: bold;\r\n    margin: 1.5em;\r\n`\r\n\r\n\r\n\r\n\r\nexport default Sidebar","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport { config } from \"./../config\"\r\n\r\nclass ByeScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n        this.state = {}\r\n\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Col>\r\n                    <Title>Feedback</Title>\r\n                    <Text>Vielen Dank, dass Sie an diesem Experiment teilgenommen haben. </Text>\r\n                    <Text>Uns ist es wichtig Feedback zu unserem Prototyp zu erhalten. Daher haben wir hierfür eine Umfrage eingerichtet.</Text>\r\n\r\n                    <Button onClick={this.handleClick}>Zur Umfrage</Button>\r\n\r\n                    <Space></Space>\r\n                </Col>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    handleClick() {\r\n        window.location.replace(\"https://survey.sogosurvey.com/r/KUX0jg\")\r\n    }\r\n}\r\n\r\nconst Title = styled.h1`\r\n    font - weight: bold;\r\n    margin: 0.5em auto;\r\n`\r\nconst Space = styled.div`\r\n    margin-bottom: 30em\r\n`\r\n\r\nconst Text = styled.div`\r\n    margin: 1em auto;\r\n    padding: 0 5 %;\r\n    font - weight: ${ props => props.weight ? props.weight : null}\r\n`\r\n\r\n\r\n\r\nconst Button = styled.button`\r\n    background-color: #57D9A3;\r\n    color: white;\r\n    margin: 3em auto;\r\n    border: none;\r\n    padding: 2em;\r\n    border-radius: 5px;\r\n    outline: none\r\n`\r\n\r\nexport default ByeScreen","import React, { Component } from \"react\";\nimport './App.css';\nimport HelloScreen from './Routes/helloScreen';\nimport BruteForce from \"./Routes/bruteForce\";\nimport Netzplan from \"./Routes/netzplan\";\nimport Sidebar from \"./Components/sidebar\"\nimport Header from \"./Components/header\"\nimport { Row, Col } from 'reactstrap';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport ByeScreen from \"./Routes/byeScreen\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props\n    this.state = {}\n    this.useCase = this.useCase.bind(this)\n  }\n\n  render() {\n    const { showUseCase } = this.state\n    return (\n      <div className=\"App\" >\n        <Row>\n          <Col xl=\"2\" lg=\"2\">\n            <Sidebar />\n          </Col>\n          <Col xl=\"10\" lg=\"10\">\n            <Row>\n              <Col>\n                <Header />\n              </Col>\n            </Row>\n            <Row>\n              <Router>\n                <Route exact path=\"/\" component={(props) => < HelloScreen {...props} useCase={this.useCase} />} />\n                <Route path=\"/bruteForce\" component={(props) => < BruteForce {...props} showUseCase={true} />} />\n                <Route path=\"/netzplan\" component={(props) => < Netzplan {...props} showUseCase={true} />} />\n                <Route path=\"/byeScreen\" component={(props) => < ByeScreen {...props} showUseCase={false} />} />\n              </Router>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n\n  useCase(bool) {\n    this.setState({ showUseCase: bool })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}